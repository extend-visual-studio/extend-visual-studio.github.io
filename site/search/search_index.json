{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site, extendvs.com, has a simple mission: to expand the public knowledge based for building extensions for Visual Studio Windows and Mac. extenvs.com is an open source, MIT licensed, community-led site. Extension Samples Please find a list of extension samples Overview This sections provides an overview of the common concepts in an IDE extension and what the equivalant API/object is in the other IDE. Manifests The manifest declares the information about our extension such as its name, author, copyright, identifier and version number. Visual Studio Windows A Visual Studio Windows extension has two manifest files, the vsix manifest and the command manifest. * Visual Studio Mac A Visual S To declare the name, version and The extension manifest is the Manifest.addin.xml Package The package is the central class that represents our extension and exposes it to the IDE. Visual Studio Windows The AsyncPackage class is the Visual Studio Mac Visual Studio Mac does not have the concept of a core package class. Package Startup The package startup Visual Studio Windows Visual Studio Mac IDE Application The IDE application is the root access point for most of the major APIs we would use in our extension. Visual Studio Windows In Visual Studio Windows the root IDE/application object is the DTE . Visual Studio Mac In Visual Studio Mac, the root IDE/application object is the IdeApp. MonoDevelop . Ide . IdeApp ; Service Locator The service locator is used to retrieve service implementations through a central access class. Visual Studio Windows In Visual Studio Windows, the service locator is the ServiceProvider class. Visual Studio Mac Visual Studio Mac does not have a service locator. To access core services: Use the static IdeServices to access core services like the ProjectService, TypeSystemService, DesktopService etc. Use the CompositionManager to access parts that have been exported to MEF. Use the IdeApp to access the core services such as the Workspace, Workbench Composition Manager The composition manager is used to retrieve parts that are exported to the Managed Extensibility Framework. Visual Studio Windows Visual Studio Mac Commands Visual Studio Windows : OleCommand Visual Studio Mac : CommandHandler. Active Document Visual Studio Windows : Visual Studio Mac : Running Document Table The runnign document table is used to describe which documents are currently open and Workspace Model In IDE extensions we have the concept of a workspace model , that is, the hierachical relationship of a solution, its projects and then those projects files and references. The workspace model is different to the compilation model as it Workspace Events Solution Pad/Explorer Pads","title":"Home"},{"location":"#welcome","text":"This site, extendvs.com, has a simple mission: to expand the public knowledge based for building extensions for Visual Studio Windows and Mac. extenvs.com is an open source, MIT licensed, community-led site.","title":"Welcome"},{"location":"#extension-samples","text":"Please find a list of extension samples","title":"Extension Samples"},{"location":"#overview","text":"This sections provides an overview of the common concepts in an IDE extension and what the equivalant API/object is in the other IDE.","title":"Overview"},{"location":"#manifests","text":"The manifest declares the information about our extension such as its name, author, copyright, identifier and version number. Visual Studio Windows A Visual Studio Windows extension has two manifest files, the vsix manifest and the command manifest. * Visual Studio Mac A Visual S To declare the name, version and The extension manifest is the Manifest.addin.xml","title":"Manifests"},{"location":"#package","text":"The package is the central class that represents our extension and exposes it to the IDE. Visual Studio Windows The AsyncPackage class is the Visual Studio Mac Visual Studio Mac does not have the concept of a core package class.","title":"Package"},{"location":"#package-startup","text":"The package startup Visual Studio Windows Visual Studio Mac","title":"Package Startup"},{"location":"#ide-application","text":"The IDE application is the root access point for most of the major APIs we would use in our extension. Visual Studio Windows In Visual Studio Windows the root IDE/application object is the DTE . Visual Studio Mac In Visual Studio Mac, the root IDE/application object is the IdeApp. MonoDevelop . Ide . IdeApp ;","title":"IDE Application"},{"location":"#service-locator","text":"The service locator is used to retrieve service implementations through a central access class. Visual Studio Windows In Visual Studio Windows, the service locator is the ServiceProvider class. Visual Studio Mac Visual Studio Mac does not have a service locator. To access core services: Use the static IdeServices to access core services like the ProjectService, TypeSystemService, DesktopService etc. Use the CompositionManager to access parts that have been exported to MEF. Use the IdeApp to access the core services such as the Workspace, Workbench","title":"Service Locator"},{"location":"#composition-manager","text":"The composition manager is used to retrieve parts that are exported to the Managed Extensibility Framework. Visual Studio Windows Visual Studio Mac","title":"Composition Manager"},{"location":"#commands","text":"Visual Studio Windows : OleCommand Visual Studio Mac : CommandHandler.","title":"Commands"},{"location":"#active-document","text":"Visual Studio Windows : Visual Studio Mac :","title":"Active Document"},{"location":"#running-document-table","text":"The runnign document table is used to describe which documents are currently open and","title":"Running Document Table"},{"location":"#workspace-model","text":"In IDE extensions we have the concept of a workspace model , that is, the hierachical relationship of a solution, its projects and then those projects files and references. The workspace model is different to the compilation model as it","title":"Workspace Model"},{"location":"#workspace-events","text":"","title":"Workspace Events"},{"location":"#solution-padexplorer","text":"","title":"Solution Pad/Explorer"},{"location":"#pads","text":"","title":"Pads"},{"location":"about-the-author/","text":"","title":"About the author"},{"location":"contributing/","text":"Help us enhance and fix MFractor docs so everyone can get the most of this tool. Introduction The s an open source project created and maintained by Matthew Robbins. Our goal is to provide rich documentation and reference to our users and customers so they can get the most of the tool. The docs is not only about the tool features itself, but we always try to bring knowledge on development platforms that MFractor assists. Documenting a product is critical and hard to do right and keep up to date. The MFractor team is very small and strive to keep up with the ever changing product features. Community contribution is very desired and welcome to achieve the goal of having this site not only as a source of information for MFractor but also as an important knowledge base for developers. Contribution Workflow Contributing to ExtendVS is much like any Git hosted open source project: Pick an issue you wish to contribute to. Fork the project repository at GitHub Create a sample at Make your changes to your forked repository. Open a Pull Request to merge your changes to the main repo If your changes are accepted we'll merge it and notify you about it. We may ask you for additional changes or reply with suggestions through comments on the Pull Request. In case we add suggestions to your Pull Request we will provide a 3 day time-frame for you to review before merging your changes. We may decide to apply the suggestions internally after the merge. This is the high level diagram of the Contribution Workflow: Important All the work to this repository is tracked through issues. We can't track forks to know about ongoing contributions to the project, so please keep your comments on the issues you may be working on so we can manage conflicts. If you've found a problem or a missing documentation that is not listed on the issues, please open one before starting your work. Info We may change parts of your contribution to fix typos, correct data or add missing information. This will be done without notice. Accepted contributions will be acknowledge on a specific section of the home page. Don't add the acknowledgements to your Pull Requests , otherwise they will be rejected. Citations will be only handled internally by our moderation team. Requirements This documentation is written using MkDocs , a popular platform for software documentation sites. To contribute you will need to install a few things: Install Python . Install pip . Install mkdocs from the pip tool pip install mkdocs . Install the [Material Theme for mkdocs] from pip install mkdocs-material Important Make sure to install mkdocs and the material theme both using pip . If you install mkdocs from Homebrew and them install the material theme from pip (the only place where its available as a package) you will get errors trying to compile the docs or running it locally. Extensions admonition and codehilite are part of the material theme. markdown_extensions : - attr_list - admonition - codehilite Troubleshooting If the Material Theme isn't installed when you try to run the project it won't work and you'll get the following error: mkdocs serve INFO - Building documentation ... ERROR - Config value : theme . Error : Unrecognised theme name : material . The available installed themes are : readthedocs , mkdocs Make sure to install mkdocs and material theme from pip . Get in touch If you need further assistance on contribution please refer to Matthew Robins or Rafael Veronezi or open an issue. We'll be glas to assist.","title":"Contributing"},{"location":"contributing/#introduction","text":"The s an open source project created and maintained by Matthew Robbins. Our goal is to provide rich documentation and reference to our users and customers so they can get the most of the tool. The docs is not only about the tool features itself, but we always try to bring knowledge on development platforms that MFractor assists. Documenting a product is critical and hard to do right and keep up to date. The MFractor team is very small and strive to keep up with the ever changing product features. Community contribution is very desired and welcome to achieve the goal of having this site not only as a source of information for MFractor but also as an important knowledge base for developers.","title":"Introduction"},{"location":"contributing/#contribution-workflow","text":"Contributing to ExtendVS is much like any Git hosted open source project: Pick an issue you wish to contribute to. Fork the project repository at GitHub Create a sample at Make your changes to your forked repository. Open a Pull Request to merge your changes to the main repo If your changes are accepted we'll merge it and notify you about it. We may ask you for additional changes or reply with suggestions through comments on the Pull Request. In case we add suggestions to your Pull Request we will provide a 3 day time-frame for you to review before merging your changes. We may decide to apply the suggestions internally after the merge. This is the high level diagram of the Contribution Workflow: Important All the work to this repository is tracked through issues. We can't track forks to know about ongoing contributions to the project, so please keep your comments on the issues you may be working on so we can manage conflicts. If you've found a problem or a missing documentation that is not listed on the issues, please open one before starting your work. Info We may change parts of your contribution to fix typos, correct data or add missing information. This will be done without notice. Accepted contributions will be acknowledge on a specific section of the home page. Don't add the acknowledgements to your Pull Requests , otherwise they will be rejected. Citations will be only handled internally by our moderation team.","title":"Contribution Workflow"},{"location":"contributing/#requirements","text":"This documentation is written using MkDocs , a popular platform for software documentation sites. To contribute you will need to install a few things: Install Python . Install pip . Install mkdocs from the pip tool pip install mkdocs . Install the [Material Theme for mkdocs] from pip install mkdocs-material Important Make sure to install mkdocs and the material theme both using pip . If you install mkdocs from Homebrew and them install the material theme from pip (the only place where its available as a package) you will get errors trying to compile the docs or running it locally.","title":"Requirements"},{"location":"contributing/#extensions","text":"admonition and codehilite are part of the material theme. markdown_extensions : - attr_list - admonition - codehilite","title":"Extensions"},{"location":"contributing/#troubleshooting","text":"If the Material Theme isn't installed when you try to run the project it won't work and you'll get the following error: mkdocs serve INFO - Building documentation ... ERROR - Config value : theme . Error : Unrecognised theme name : material . The available installed themes are : readthedocs , mkdocs Make sure to install mkdocs and material theme from pip .","title":"Troubleshooting"},{"location":"contributing/#get-in-touch","text":"If you need further assistance on contribution please refer to Matthew Robins or Rafael Veronezi or open an issue. We'll be glas to assist.","title":"Get in touch"},{"location":"tools/visual-studio-mac/","text":"","title":"Visual studio mac"},{"location":"tools/visual-studio-windows/","text":"","title":"Visual studio windows"}]}