{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site, extendvs.com, has a simple mission: to expand the public knowledge based for building extensions for Visual Studio Windows and Mac. extenvs.com is an open source, MIT licensed, community-led site. Extension Samples Please find a list of extension samples Overview This sections provides an overview of the common concepts in an IDE extension and what the equivalant API/object is in the other IDE. Manifests The manifest declares the information about our extension such as its name, author, copyright, identifier and version number. Visual Studio Windows A Visual Studio Windows extension has the VSIX manifest and the command manifest. The VSIX manifest file ( extension.vsixmanifest ) defines the information about your extension such as name, author, version number and more. See here for documentation. The Visual Studio Command Table ( .vsct ) defines the commands that your package contains. See here for documentation. Visual Studio Mac A Visual Studio Mac extension includes a file named Manifest.addin.xml that defines the extension points To declare the name, author, copyright, version etc of an extension, we use the following attributes: Package The package is the central class that represents our extension and exposes it to the IDE. Visual Studio Windows We implement the AsyncPackage class to declare the core of our extension. See here for documentation. Visual Studio Mac Visual Studio Mac does not have the concept of a core package class. Extension Startup For both Visual Studio Windows and Mac, extensions by default do not have a defined entry point. Extensions do not receive startup notifications by default and should be design so that they do not rely on a startup sequence. Visual Studio Windows To detect the startup of our extension in Visual Studio Windows, we register the loading of our package against a specified IDE event using the ProvideAutoLoad attribute attached to our Package. See here for documentation . Avoid relying on any form of startup event to initialise your Visual Studio Windows extension. The modern Visual Studio APIs (such as IntelliSense or adornments) and Roslyn APIs load feature implementations outside of Visual Studio Mac To detect the startup of our extension on Visual Studio Mac, we add a new CommandHandler to the /MonoDevelop/Ide/StartupHandlers extension point. IDE Application The IDE application is the root access point for most of the major APIs we would use in our extension. Visual Studio Windows In Visual Studio Windows the root IDE/application object is the DTE . Importantly, the DTE also has the DTE2 interface that exposes many additional APIs. Visual Studio Mac In Visual Studio Mac, the root IDE/application object is the IdeApp . Service Locator The service locator is used to retrieve service implementations through a central access class. Visual Studio Windows In Visual Studio Windows, the service locator is the ServiceProvider class. Below is an example of retrieving a service using the ServiceProvider : var dte = ServiceProvider . GlobalProvider . GetService ( typeof ( DTE )) as DTE2 ; Visual Studio Mac Visual Studio Mac does not have a service locator. To access core services: Use the static IdeServices to access core services like the ProjectService, TypeSystemService, DesktopService etc. Use the CompositionManager to access parts that have been exported to MEF. Use the IdeApp to access the core services such as the Workspace, Workbench Composition Manager The composition manager is used to retrieve parts that are exported to the Managed Extensibility Framework. Visual Studio Windows We can access the MEF composition manager on Windows with the following code: Visual Studio Mac We can access the MEF composition manager on Mac with the following code: Commands Visual Studio Windows In Visual Studio Windows we declare command elements in a vsct file and register new commands using the OleMenuCommandService . See here for documentation. Visual Studio Mac In Visual Studio Mac we create CommandHandler sub-classes and then connect that command instance into an extension point using the Manifest.addin.xml file. See here for documentation. Active Documents The list of active, opened documents, also known as the running documents table, describe the documents that are currently open and have a source code editor user interface. Visual Studio Windows In Visual Studio Windows, we can the DTE2.Documents property to access the currently open documents. To subscribe to document open/closed/modified events, we can use the DTE2.Events.DocumentEvents property. Visual Studio Mac In Visual Studio Mac, we can use the TypeSystemService.DocumentManager to query the currently opened documents and subscribe to open/closed/modified events. Workspace Model In IDE extensions we have the concept of a workspace model , that is, the hierarchical relationship of a solution, its projects and the files and references of those projects. The workspace model is different to the compilation model as it incorporates project assets (like images or embedded resources), packages etc into the model. The workspace model is akin to what is displayed in the Solution Explorer, whereas the compilation model only contains information required to generate an executable. Visual Studio Windows Visual Studio Mac Workspace Events Solution Pad/Explorer Pads","title":"Home"},{"location":"#welcome","text":"This site, extendvs.com, has a simple mission: to expand the public knowledge based for building extensions for Visual Studio Windows and Mac. extenvs.com is an open source, MIT licensed, community-led site.","title":"Welcome"},{"location":"#extension-samples","text":"Please find a list of extension samples","title":"Extension Samples"},{"location":"#overview","text":"This sections provides an overview of the common concepts in an IDE extension and what the equivalant API/object is in the other IDE.","title":"Overview"},{"location":"#manifests","text":"The manifest declares the information about our extension such as its name, author, copyright, identifier and version number. Visual Studio Windows A Visual Studio Windows extension has the VSIX manifest and the command manifest. The VSIX manifest file ( extension.vsixmanifest ) defines the information about your extension such as name, author, version number and more. See here for documentation. The Visual Studio Command Table ( .vsct ) defines the commands that your package contains. See here for documentation. Visual Studio Mac A Visual Studio Mac extension includes a file named Manifest.addin.xml that defines the extension points To declare the name, author, copyright, version etc of an extension, we use the following attributes:","title":"Manifests"},{"location":"#package","text":"The package is the central class that represents our extension and exposes it to the IDE. Visual Studio Windows We implement the AsyncPackage class to declare the core of our extension. See here for documentation. Visual Studio Mac Visual Studio Mac does not have the concept of a core package class.","title":"Package"},{"location":"#extension-startup","text":"For both Visual Studio Windows and Mac, extensions by default do not have a defined entry point. Extensions do not receive startup notifications by default and should be design so that they do not rely on a startup sequence. Visual Studio Windows To detect the startup of our extension in Visual Studio Windows, we register the loading of our package against a specified IDE event using the ProvideAutoLoad attribute attached to our Package. See here for documentation . Avoid relying on any form of startup event to initialise your Visual Studio Windows extension. The modern Visual Studio APIs (such as IntelliSense or adornments) and Roslyn APIs load feature implementations outside of Visual Studio Mac To detect the startup of our extension on Visual Studio Mac, we add a new CommandHandler to the /MonoDevelop/Ide/StartupHandlers extension point.","title":"Extension Startup"},{"location":"#ide-application","text":"The IDE application is the root access point for most of the major APIs we would use in our extension. Visual Studio Windows In Visual Studio Windows the root IDE/application object is the DTE . Importantly, the DTE also has the DTE2 interface that exposes many additional APIs. Visual Studio Mac In Visual Studio Mac, the root IDE/application object is the IdeApp .","title":"IDE Application"},{"location":"#service-locator","text":"The service locator is used to retrieve service implementations through a central access class. Visual Studio Windows In Visual Studio Windows, the service locator is the ServiceProvider class. Below is an example of retrieving a service using the ServiceProvider : var dte = ServiceProvider . GlobalProvider . GetService ( typeof ( DTE )) as DTE2 ; Visual Studio Mac Visual Studio Mac does not have a service locator. To access core services: Use the static IdeServices to access core services like the ProjectService, TypeSystemService, DesktopService etc. Use the CompositionManager to access parts that have been exported to MEF. Use the IdeApp to access the core services such as the Workspace, Workbench","title":"Service Locator"},{"location":"#composition-manager","text":"The composition manager is used to retrieve parts that are exported to the Managed Extensibility Framework. Visual Studio Windows We can access the MEF composition manager on Windows with the following code: Visual Studio Mac We can access the MEF composition manager on Mac with the following code:","title":"Composition Manager"},{"location":"#commands","text":"Visual Studio Windows In Visual Studio Windows we declare command elements in a vsct file and register new commands using the OleMenuCommandService . See here for documentation. Visual Studio Mac In Visual Studio Mac we create CommandHandler sub-classes and then connect that command instance into an extension point using the Manifest.addin.xml file. See here for documentation.","title":"Commands"},{"location":"#active-documents","text":"The list of active, opened documents, also known as the running documents table, describe the documents that are currently open and have a source code editor user interface. Visual Studio Windows In Visual Studio Windows, we can the DTE2.Documents property to access the currently open documents. To subscribe to document open/closed/modified events, we can use the DTE2.Events.DocumentEvents property. Visual Studio Mac In Visual Studio Mac, we can use the TypeSystemService.DocumentManager to query the currently opened documents and subscribe to open/closed/modified events.","title":"Active Documents"},{"location":"#workspace-model","text":"In IDE extensions we have the concept of a workspace model , that is, the hierarchical relationship of a solution, its projects and the files and references of those projects. The workspace model is different to the compilation model as it incorporates project assets (like images or embedded resources), packages etc into the model. The workspace model is akin to what is displayed in the Solution Explorer, whereas the compilation model only contains information required to generate an executable. Visual Studio Windows Visual Studio Mac","title":"Workspace Model"},{"location":"#workspace-events","text":"","title":"Workspace Events"},{"location":"#solution-padexplorer","text":"","title":"Solution Pad/Explorer"},{"location":"#pads","text":"","title":"Pads"},{"location":"about-the-author/","text":"","title":"About the author"},{"location":"tools/visual-studio-mac/","text":"","title":"Visual studio mac"},{"location":"tools/visual-studio-windows/","text":"","title":"Visual studio windows"}]}